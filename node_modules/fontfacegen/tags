!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Cmd	lib/fontforge.js	/^      const installCmd = isLinux() ? 'sudo apt-get install' : 'brew install';$/;"	c
Cmd	lib/ttf.js	/^    subsetCmd = uniqueChars(subset)$/;"	c
FONTFORGE	lib/fontforge.js	/^const FONTFORGE = 'fontforge';$/;"	n
FontFaceException	lib/exception.js	/^export default class FontFaceException extends Error {$/;"	c
FontForgeException	lib/fontforge.js	/^function FontForgeException(e, cmd) {$/;"	f
Linux	lib/helpers.js	/^const _isLinux = type().toLowerCase() === 'linux';$/;"	c
TRACE	test/index.js	/^    console.error('ERROR TRACE: ', err); \/\/ eslint-disable-line no-console$/;"	n
Table	lib/fontforge.js	/^const weightTable = {$/;"	c
Uri	lib/encode.js	/^  const dataUri = readFileSync(fontFile, 'base64'); \/\/ Convert to data:uri$/;"	c
Uri	lib/encode.js	/^  const dataUri = removeNewLines(readFileSync(fontFile));$/;"	c
catch	lib/fontforge.js	/^    } catch (e) {$/;"	f
catch	lib/fontforge.js	/^  } catch (e) {$/;"	f
catch	lib/ttf2eot.js	/^  } catch (e) {$/;"	f
catch	lib/ttf2svg.js	/^  } catch (e) {$/;"	f
catch	test/index.js	/^    } catch (e) {$/;"	f
charToHex	lib/helpers.js	/^export function charToHex(ch) {$/;"	f
cleanup	test/index.js	/^function cleanup(source, dest) {$/;"	f
css	lib/stylesheets.js	/^function css(stylesheet, name, filename, weight, style, woff2, woff, ttf, svg, embedSvg) {$/;"	f
download	test/index.js	/^function download(url, dest) {$/;"	f
downloadFileIfMissing	test/index.js	/^function downloadFileIfMissing(url, dest) {$/;"	f
encode	lib/encode.js	/^export default function encode(fontFile) {$/;"	f
ensureFontForge	lib/fontforge.js	/^function ensureFontForge() {$/;"	f
fontforge	lib/fontforge.js	/^export default function fontforge(source, script, target, name) {$/;"	f
getName	lib/fontforge.js	/^export function getName(source) {$/;"	f
getStyle	lib/fontforge.js	/^export function getStyle(source) {$/;"	f
getWeight	lib/fontforge.js	/^export function getWeight(source) {$/;"	f
has	lib/helpers.js	/^export function has(haystack, needle) {$/;"	f
if	lib/fontfacegen.js	/^  if (config.css) {$/;"	f
if	lib/fontfacegen.js	/^  if (config.less) {$/;"	f
if	lib/fontfacegen.js	/^  if (config.scss) {$/;"	f
if	lib/fontforge.js	/^    if (weightTable[weight]) {$/;"	f
if	lib/fontforge.js	/^  if (!ensured) {$/;"	f
if	lib/fontforge.js	/^  if (name !== undefined) {$/;"	f
if	lib/fontforge.js	/^  if (result) {$/;"	f
if	lib/fontforge.js	/^  if (target !== undefined) {$/;"	f
if	lib/helpers.js	/^  if (!buffer) {$/;"	f
if	lib/stylesheets.js	/^  if (config.css) {$/;"	f
if	lib/stylesheets.js	/^  if (config.less) {$/;"	f
if	lib/stylesheets.js	/^  if (config.scss) {$/;"	f
if	lib/stylesheets.js	/^  if (embedSvg) {$/;"	f
if	lib/ttf.js	/^  if (subset) {$/;"	f
if	test/index.js	/^      if (!err) {$/;"	f
isLinux	lib/helpers.js	/^export function isLinux() {$/;"	f
less	lib/stylesheets.js	/^function less(stylesheet, name, filename, weight, style, woff2, woff, ttf, svg, embedSvg) {$/;"	f
merge	lib/helpers.js	/^export function merge(destination, source) {$/;"	f
processFont	test/index.js	/^function processFont(source, dest) {$/;"	f
quote	lib/helpers.js	/^export function quote(str) {$/;"	f
removeNewLines	lib/helpers.js	/^export function removeNewLines(buffer) {$/;"	f
scss	lib/stylesheets.js	/^function scss(stylesheet, name, filename, weight, style, woff2, woff, ttf, svg, embedSvg) {$/;"	f
svg	lib/encode.js	/^export function svg(fontFile) {$/;"	f
trim	lib/helpers.js	/^export function trim(buffer) {$/;"	f
uniqueChars	lib/helpers.js	/^export function uniqueChars(subset) {$/;"	f
